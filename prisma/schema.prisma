// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
<<<<<<< HEAD
  url      = env("DATABASE_01_URL")
}

// Person

model User {
  id                      Int                      @id @default(autoincrement())
  password                String
  document                String                   @unique
  type_person             String
  Register_natural_person Register_natural_person?
  Register_legal_person   Register_legal_person?
  Register_user_role      Register_user_role[]

  @@map("users")
}

model Register_natural_person {
  id                 Int      @id @default(autoincrement())
  name               String
  nb_rg              String
  organ_emission_rg  String
  uf_rg              String
  date_emission_rg   DateTime
  cnh                String
  cpf                String   @unique
  date_birth         DateTime
  nationality        String
  address_cep        String
  address_street     String
  address_nb         String
  address_complement String
  address_city       String
  email              String
  phone              String
  Photo              Photo    @relation(fields: [photo], references: [name_photo])
  photo              String   @unique
  User               User     @relation(fields: [user_id], references: [id])
  user_id            Int      @unique

  Register_change_natural_person Register_change_natural_person[]
  entity_id                      Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Register_resp_entity             Register_resp_entity[]
  Register_resp_organization_chart Register_resp_organization_chart[]

  @@map("register_natural_persons")
}

model Register_change_natural_person {
  id                      Int                     @id @unique @default(autoincrement())
  description             String
  date                    DateTime                @default(now())
  reason                  String
  Register_natural_person Register_natural_person @relation(fields: [person_id], references: [id])
  person_id               Int

  @@map("register_change_natural_person")
}

model Register_legal_person {
  id                           Int                            @id @default(autoincrement())
  cnpj                         String                         @unique
  name                         String
  corporate_name               String
  nationality                  String
  register_date                DateTime
  address_cep                  String
  address_street               String
  address_nb                   String
  address_complement           String
  address_city                 String
  email                        String
  Photo                        Photo                          @relation(fields: [photo], references: [name_photo])
  photo                        String                         @unique
  phone                        String
  entity_id                    Int
  User                         User                           @relation(fields: [user_id], references: [id])
  user_id                      Int                            @unique
  Register_change_legal_person Register_change_legal_person[]
  Register_entity              Register_entity[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("register_legal_persons")
}

model Register_change_legal_person {
  id                    Int                   @id @unique @default(autoincrement())
  description           String
  date                  DateTime              @default(now())
  reason                String
  Register_legal_person Register_legal_person @relation(fields: [person_id], references: [id])
  person_id             Int

  @@map("register_change_legal_person")
}

model Photo {
  id                      Int                      @id @default(autoincrement())
  name_photo              String                   @unique
  Register_legal_person   Register_legal_person?
  Register_natural_person Register_natural_person?

  @@map("photos")
}

// Permissions and roles

model Register_role {
  id                        Int                         @id @default(autoincrement())
  name                      String
  description               String
  type                      String
  Register_user_role        Register_user_role[]
  Register_roles_permission Register_roles_permission[]

  @@map("register_roles")
}

model Register_user_role {
  id            Int           @id @default(autoincrement())
  User          User          @relation(fields: [user_id], references: [id])
  user_id       Int
  Register_role Register_role @relation(fields: [role_id], references: [id])
  role_id       Int

  @@map("register_user_roles")
}

model Register_permission {
  id                       Int                         @id @default(autoincrement())
  name                     String
  description              String
  resource                 String
  Register_role_permission Register_roles_permission[]

  @@map("register_permissions")
}

model Register_roles_permission {
  id                  Int                  @id @default(autoincrement())
  Register_role       Register_role        @relation(fields: [role_id], references: [id])
  role_id             Int
  Register_permission Register_permission? @relation(fields: [permission_id], references: [id])
  permission_id       Int

  @@map("register_roles_permissions")
}

// Entities

model Register_entity {
  id                          Int                    @id @default(autoincrement())
  Register_legal_person       Register_legal_person  @relation(fields: [legal_person_id], references: [id])
  legal_person_id             Int
  Legal_nature                Legal_nature           @relation(fields: [legal_nature_id], references: [id])
  legal_nature_id             Int
  email                       String
  phone                       String
  site                        String
  time_zone                   String
  rpps                        Boolean
  plan_type                   String
  County                      County                 @relation(fields: [county_id], references: [id])
  county_id                   Int
  county_cod                  String
  Register_entity_type        Register_entity_type   @relation(fields: [entity_type_id], references: [id])
  entity_type_id              Int
  advisory                    Boolean
  person_advisory_id          Int // Verificar se é possível relacionar o fisico e o jurídico 
  software_provider_person_id Int // Verificar se é possível relacionar o fisico e o jurídico
  software_version            String
  date_institution            DateTime
  creation_act                String
  extinction_date             DateTime
  Register_resp_entity        Register_resp_entity[]

  @@map("register_entities")
}

model Register_entity_type {
  id              Int               @id @default(autoincrement())
  description     String
  nb_tce          String
  start_date      DateTime
  final_date      DateTime
  Register_entity Register_entity[]

  @@map("register_entitie_types")
}

model Register_resp_entity {
  id                          Int                           @id @default(autoincrement())
  Register_natural_person     Register_natural_person       @relation(fields: [natural_person_id], references: [id])
  natural_person_id           Int
  Register_change_resp_entity Register_change_resp_entity[]
  Register_entity             Register_entity               @relation(fields: [entity_id], references: [id])
  entity_id                   Int
  start_date                  DateTime
  final_expected_date         DateTime

  @@map("register_resp_entities")
}

model Register_change_resp_entity {
  id                   Int                  @id @default(autoincrement())
  description          String
  date                 DateTime             @default(now())
  reason               String
  Register_resp_entity Register_resp_entity @relation(fields: [resp_id], references: [id])
  resp_id              Int

  @@map("register_change_resp_entities")
}

model Legal_nature {
  id                  Int                   @id @default(autoincrement())
  nb_legal_nature     String
  description         String
  start_date          DateTime
  final_date          DateTime
  Register_entity     Register_entity[]
  Register_admin_type Register_admin_type[]

  @@map("legal_nature")
}

model Uf {
  id          Int      @id @default(autoincrement())
  uf_cod      Int
  uf          String
  description String
  County      County[]

  @@map("ufs")
}

model County {
  id              Int               @id @default(autoincrement())
  description     String
  Uf              Uf                @relation(fields: [uf_id], references: [id])
  uf_id           Int
  nb_ibge         String
  Register_entity Register_entity[]

  @@map("counties")
}

model Register_admin_type {
  id                          Int                           @id @default(autoincrement())
  description                 String
  start_date                  DateTime
  final_date                  DateTime
  Legal_nature                Legal_nature                  @relation(fields: [legal_nature_id], references: [id])
  legal_nature_id             Int
  type                        String
  power                       String
  Register_organization_chart Register_organization_chart[]

  @@map("register_admin_types")
}

// Organization_chart

model Register_organization_chart {
  id                                 Int                                  @id @default(autoincrement())
  Register_organization_chart_config Register_organization_chart_config   @relation(fields: [organization_chart_config_id], references: [id])
  organization_chart_config_id       Int
  description                        String
  nb_organogram                      String
  Register_admin_type                Register_admin_type                  @relation(fields: [admin_type_id], references: [id])
  admin_type_id                      Int
  year                               Int
  start_date                         DateTime
  Register_background_type           Register_background_type             @relation(fields: [background_type_id], references: [id])
  background_type_id                 Int
  subunit                            Boolean
  Register_change_organization_chart Register_change_organization_chart[]
  Register_resp_organization_chart   Register_resp_organization_chart[]

  @@map("register_organization_charts")
}

model Register_change_organization_chart {
  id                          Int                         @id @default(autoincrement())
  description                 String
  date                        DateTime                    @default(now())
  reason                      String
  Register_organization_chart Register_organization_chart @relation(fields: [organization_chart_id], references: [id])
  organization_chart_id       Int

  @@map("register_change_organization_charts")
}

model Register_resp_organization_chart {
  id Int @id @default(autoincrement())

  Register_organization_chart Register_organization_chart @relation(fields: [organization_chart_id], references: [id])
  organization_chart_id       Int

  Register_natural_person                 Register_natural_person                   @relation(fields: [natural_person_id], references: [id])
  natural_person_id                       Int
  start_date                              DateTime
  final_expected_date                     DateTime
  Register_change_resp_organization_chart Register_change_resp_organization_chart[]

  @@map("register_resp_organization_charts")
}

model Register_change_resp_organization_chart {
  id                               Int                              @id @default(autoincrement())
  description                      String
  date                             DateTime                         @default(now())
  reason                           String
  Register_resp_organization_chart Register_resp_organization_chart @relation(fields: [resp_organization_chart_id], references: [id])
  resp_organization_chart_id       Int

  @@map("register_change_resp_organization_charts")
}

model Register_organization_chart_config {
  id                           Int                           @id @default(autoincrement())
  description                  String
  nb_config_organization_chart String
  name_level_1                 String
  name_level_2                 String
  name_level_3                 String
  name_level_4                 String
  name_level_5                 String
  name_level_6                 String
  size_level_1                 Int
  size_level_2                 Int
  size_level_3                 Int
  size_level_4                 Int
  size_level_5                 Int
  size_level_6                 Int
  separator_level_1            String
  separator_level_2            String
  separator_level_3            String
  separator_level_4            String
  separator_level_5            String
  separator_level_6            String
  required_level_1             Boolean
  required_level_2             Boolean
  required_level_3             Boolean
  required_level_4             Boolean
  required_level_5             Boolean
  required_level_6             Boolean
  year                         Int
  start_date                   DateTime
  Register_organization_chart  Register_organization_chart[]

  @@map("register_organization_chart_configs")
}

model Register_background_type {
  id                          Int                           @id @default(autoincrement())
  description                 String
  nb_tce                      String
  start_date                  DateTime
  final_date                  DateTime
  Register_organization_chart Register_organization_chart[]

  @@map("register_background_types")
=======
  url      = env("DATABASE_URL")
>>>>>>> b9d0cbe40700cd7f77e5031c17922de2267c5bff
}
